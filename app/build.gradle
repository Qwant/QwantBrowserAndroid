/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

plugins {
    id "com.jetbrains.python.envs" version "0.0.26"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: "$project.rootDir/automation/gradle/versionCode.gradle"

apply plugin: 'org.mozilla.appservices'

appservices {
    defaultConfig {
        megazord = 'reference-browser'
        // Necessary to allow for local dependency substitutions.
        // See https://github.com/mozilla-mobile/reference-browser/pull/356#issuecomment-449190236
        unitTestingEnabled = false
    }
}

android {
    compileSdkVersion Config.compileSdkVersion

    defaultConfig {
        applicationId "org.mozilla.reference.browser"
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName + Config.generateVersionSuffix()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        releaseRaptor {
            initWith release
            manifestPlaceholders.isRaptorEnabled = "true"
            matchingFallbacks = ['release']
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    flavorDimensions "engine", "abi"

    productFlavors {
        // GeckoView release channels (For now only Nightly)
        geckoNightly { dimension "engine" }

        // Processor architectures
        arm {
            dimension "abi"
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        x86 {
            dimension "abi"
            ndk {
                abiFilter "x86"
            }
        }
        aarch64 {
            dimension "abi"
            ndk {
                abiFilter "arm64-v8a"
            }
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }
}

android.applicationVariants.all { variant ->

// -------------------------------------------------------------------------------------------------
// Sentry: Read token from local file if it exists (Only release builds)
// -------------------------------------------------------------------------------------------------
    print("Sentry token:  "+ variant.name)
    try {
        def token = new File("${rootDir}/.sentry_token").text.trim()
        buildConfigField 'String', 'SENTRY_TOKEN', '"' + token + '"'
        println "(Added from .sentry_token file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'SENTRY_TOKEN', 'null'
        println(" :( ")
    }

// -------------------------------------------------------------------------------------------------
// Activating crash reports with command line parameter.
// -------------------------------------------------------------------------------------------------
    if (project.hasProperty("crashReportEnabled") && project.property("crashReportEnabled") == "true") {
        buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'true'
    } else {
        buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'false'
    }

// -------------------------------------------------------------------------------------------------
// Activating telemetry  with command line paramter.
// -------------------------------------------------------------------------------------------------

if (project.hasProperty("telemetry") && project.property("telemetry") == "true") {
    buildConfigField 'boolean', 'TELEMETRY_ENABLED', 'true'
} else {
    buildConfigField 'boolean', 'TELEMETRY_ENABLED', 'false'
}

// -------------------------------------------------------------------------------------------------
// Generating version codes for Google Play
// -------------------------------------------------------------------------------------------------
    def buildType = variant.buildType.name

    if (buildType == "release") {
        def versionCode = generatedVersionCode

        // The Google Play Store does not allow multiple APKs for the same app that all have the
        // same version code. Therefore we need to have different version codes for our ARM and x86
        // builds.

        // Our x86 builds need a higher version code to avoid installing ARM builds on an x86 device
        // with ARM compatibility mode.

        if (variant.flavorName.contains("X86")) {
            versionCode = versionCode + 2
        } else if (variant.flavorName.contains("Aarch64")) {
            versionCode = versionCode + 1
        }

        variant.outputs.all { output ->
            setVersionCodeOverride(versionCode)
        }
    }
}

configurations {
    geckoNightlyArmImplementation {}
    geckoNightlyX86Implementation {}
    geckoNightlyAarch64Implementation {}
}

dependencies {
    implementation Deps.mozilla_concept_engine
    implementation Deps.mozilla_concept_tabstray
    implementation Deps.mozilla_concept_toolbar
    implementation Deps.mozilla_concept_storage
    implementation Deps.mozilla_concept_sync

    implementation Deps.mozilla_browser_awesomebar
    implementation Deps.mozilla_browser_domains
    implementation Deps.mozilla_browser_search
    implementation Deps.mozilla_browser_session
    implementation Deps.mozilla_browser_tabstray
    implementation Deps.mozilla_browser_toolbar
    implementation Deps.mozilla_browser_menu
    implementation Deps.mozilla_browser_session
    implementation Deps.mozilla_browser_storage_sync

    implementation Deps.mozilla_feature_accounts
    implementation Deps.mozilla_feature_awesomebar
    implementation Deps.mozilla_feature_contextmenu
    implementation Deps.mozilla_feature_customtabs
    implementation Deps.mozilla_feature_findinpage
    implementation Deps.mozilla_feature_sitepermissions
    implementation Deps.mozilla_feature_intent
    implementation Deps.mozilla_feature_search
    implementation Deps.mozilla_feature_session
    implementation Deps.mozilla_feature_sync
    implementation Deps.mozilla_feature_toolbar
    implementation Deps.mozilla_feature_tabs
    implementation Deps.mozilla_feature_downloads
    implementation Deps.mozilla_feature_prompts
    implementation Deps.mozilla_feature_qr
    implementation Deps.mozilla_feature_readerview

    implementation Deps.mozilla_ui_autocomplete
    implementation Deps.mozilla_ui_colors

    implementation Deps.mozilla_service_firefox_accounts
    implementation Deps.mozilla_service_glean

    implementation Deps.mozilla_support_utils
    implementation Deps.mozilla_support_ktx
    implementation Deps.mozilla_support_rustlog
    implementation Deps.mozilla_lib_crash
    implementation Deps.thirdparty_sentry

    geckoNightlyImplementation Deps.mozilla_browser_engine_gecko_nightly
    geckoNightlyArmImplementation Gecko.geckoview_nightly_arm
    geckoNightlyX86Implementation Gecko.geckoview_nightly_x86
    geckoNightlyAarch64Implementation Gecko.geckoview_nightly_aarch64

    implementation Deps.kotlin_stdlib
    implementation Deps.kotlin_coroutines

    implementation Deps.androidx_appcompat
    implementation Deps.androidx_constraintlayout
    implementation Deps.androidx_preference
    implementation Deps.arch_workmanager
    implementation Deps.google_material

    androidTestImplementation Deps.uiautomator

    androidTestImplementation Deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation(Deps.espresso_contrib) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
        exclude module: 'espresso-core'
    }

    androidTestImplementation Deps.espresso_idling_resources
    androidTestImplementation Deps.espresso_web, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation Deps.mockwebserver
    androidTestImplementation Deps.tools_test_runner
    androidTestImplementation Deps.tools_test_rules
    androidTestUtil Deps.orchestrator
    androidTestImplementation Deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

// -------------------------------------------------------------------------------------------------
// Task for printing all vuild variants to build variants in parallel in automation
// -------------------------------------------------------------------------------------------------
task printBuildVariants {
    doLast {
        def buildVariants = android.applicationVariants.collect { variant ->
            variant.name
        }
        println "variants: " + groovy.json.JsonOutput.toJson(buildVariants)
    }
}

task printGeckoviewVersions {
    doLast {
        println "nightly: " + groovy.json.JsonOutput.toJson(GeckoVersions.nightly_version)
    }
}

// Normally this should use the same version as the dependency. But since we are using snapshots we can't reference a
// git tag. So we are just using "master" and hoping for the best.
apply from: 'https://github.com/mozilla-mobile/android-components/raw/master/components/service/glean/scripts/sdk_generator.gradle'
